# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: add_issue_to_project
on:
  issues:
    types:
      - opened
  workflow_call:
    inputs:
      org:
        required: true
        type: string
      project_no:
        required: true
        type: number
      target_slack_channel_url_pattern:
        required: true
        type: string
    secrets:
      pat:
        required: true
      slack_app_secret:
        required: true
jobs:
  track_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}
          ORGANIZATION: ${{ inputs.org }}
          PROJECT_NUMBER: ${{ inputs.project_no }}
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add Issue to project
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_NODE_ID --jq '.data.addProjectV2ItemById.item.id')"

            echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Get date
        run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: Date!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: { 
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
              set_date_posted: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: { 
                  date: $date_value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent

      - name: Send slack
        if: contains(github.event.issue.body, inputs.target_slack_channel_url_pattern)
        env:
          SLACK_TOKEN: ${{ secrets.slack_app_secret }}
          SLACK_CHANNEL_URL_PATTERN: ${{ inputs.target_slack_channel_url_pattern }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_USER_NAME: ${{ github.event.issue.user.login }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          slack_msg_url=$(echo $ISSUE_BODY | grep -Eo "${SLACK_CHANNEL_URL_PATTERN}[^ >]+" | head -1)
          channel_id=$(echo $slack_msg_url | cut -d / -f 5)
          slack_ts_str=${slack_msg_url##*/}
          slack_ts_src=$(echo $slack_ts_str | tr -d -c 0-9)
          slack_ts=$(echo ${slack_ts_src:0:10}.${slack_ts_src:10:6})
          curl https://slack.com/api/chat.postMessage -X POST -H 'Content-type: application/json; charset=utf-8' -H "Authorization: Bearer ${SLACK_TOKEN}" --data "{\"channel\":\"${channel_id}\", \"attachments\":[{\"color\":\"#0000D0\", \"fields\":[{\"title\":\"[메시지 언급] ${ISSUE_TITLE}\",\"value\":\"${ISSUE_USER_NAME} 님이 아래 이슈에서 이 메시지를 언급했습니다.\\r\\n - <${ISSUE_URL}|이슈 링크>\",\"short\":false}]}], \"thread_ts\":\"${slack_ts}\"}"
